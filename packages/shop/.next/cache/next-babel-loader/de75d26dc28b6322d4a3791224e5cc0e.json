{"ast":null,"code":"var _jsxFileName = \"/Volumes/Second/npm/PFE_git/packages/shop/contexts/search/search.provider.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useReducer } from \"react\";\nimport { SearchContext } from \"./search.context\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"UPDATE\":\n      return _objectSpread({}, state, {}, action.payload);\n\n    case \"UPDATE_LOCATION\":\n      return _objectSpread({}, state, {}, action.payload);\n\n    case \"RESET\":\n      return {\n        page: 1,\n        search: {\n          state: \"\",\n          cities: []\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport const SearchProvider = ({\n  children,\n  query\n}) => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, _objectSpread({}, query, {\n    page: 1,\n    search: {\n      state: \"\",\n      cities: []\n    }\n  }));\n\n  const updateSearch = search => {\n    dispatch({\n      type: \"UPDATE_LOCATION\",\n      payload: search\n    });\n    localStorage.setItem(\"search\", search);\n  };\n  /*  useEffect(() => {\n    const search = localStorage.getItem(\"search\");\n    console.log(search);\n     if (search || search === \"undefined\" || search === \"null\") {\n      updateSearch(search);\n    } else {\n      updateSearch(\"e\");\n    }\n    console.log(search);\n  }, []);*/\n\n\n  return __jsx(SearchContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      updateSearch\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"sources":["/Volumes/Second/npm/PFE_git/packages/shop/contexts/search/search.provider.tsx"],"names":["React","useReducer","SearchContext","reducer","state","action","type","payload","page","search","cities","SearchProvider","children","query","dispatch","updateSearch","localStorage","setItem"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAA6C,OAA7C;AACA,SAASC,aAAT,QAA8B,kBAA9B;;AAMA,SAASC,OAAT,CAAiBC,KAAjB,EAA6BC,MAA7B,EAAsD;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,QAAL;AACE,+BAAYF,KAAZ,MAAsBC,MAAM,CAACE,OAA7B;;AACF,SAAK,iBAAL;AACE,+BAAYH,KAAZ,MAAsBC,MAAM,CAACE,OAA7B;;AACF,SAAK,OAAL;AACE,aAAO;AAAEC,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,MAAM,EAAE;AAAEL,UAAAA,KAAK,EAAE,EAAT;AAAaM,UAAAA,MAAM,EAAE;AAArB;AAAnB,OAAP;;AACF;AACE,aAAON,KAAP;AARJ;AAUD;;AAMD,OAAO,MAAMO,cAA4D,GAAG,CAAC;AAC3EC,EAAAA,QAD2E;AAE3EC,EAAAA;AAF2E,CAAD,KAGtE;AACJ,QAAM;AAAA,OAACT,KAAD;AAAA,OAAQU;AAAR,MAAoBb,UAAU,CAACE,OAAD,oBAC/BU,KAD+B;AAElCL,IAAAA,IAAI,EAAE,CAF4B;AAGlCC,IAAAA,MAAM,EAAE;AAAEL,MAAAA,KAAK,EAAE,EAAT;AAAaM,MAAAA,MAAM,EAAE;AAArB;AAH0B,KAApC;;AAKA,QAAMK,YAAY,GAAIN,MAAD,IAAY;AAC/BK,IAAAA,QAAQ,CAAC;AAAER,MAAAA,IAAI,EAAE,iBAAR;AAA2BC,MAAAA,OAAO,EAAEE;AAApC,KAAD,CAAR;AACAO,IAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BR,MAA/B;AACD,GAHD;AAIA;;;;;;;;;;;;AAWA,SACE,MAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEL,MAAAA,KAAF;AAASU,MAAAA,QAAT;AAAmBC,MAAAA;AAAnB,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,QADH,CADF;AAKD,CA7BM","sourcesContent":["import React, { useReducer, useEffect } from \"react\";\nimport { SearchContext } from \"./search.context\";\ntype ActionType = {\n  type: \"UPDATE\" | \"RESET\" | \"UPDATE_LOCATION\";\n  payload: object;\n};\n\nfunction reducer(state: any, action: ActionType): any {\n  switch (action.type) {\n    case \"UPDATE\":\n      return { ...state, ...action.payload };\n    case \"UPDATE_LOCATION\":\n      return { ...state, ...action.payload };\n    case \"RESET\":\n      return { page: 1, search: { state: \"\", cities: [] } };\n    default:\n      return state;\n  }\n}\n\ntype SearchProviderProps = {\n  query: any;\n};\n\nexport const SearchProvider: React.FunctionComponent<SearchProviderProps> = ({\n  children,\n  query,\n}) => {\n  const [state, dispatch] = useReducer(reducer, {\n    ...query,\n    page: 1,\n    search: { state: \"\", cities: [] },\n  });\n  const updateSearch = (search) => {\n    dispatch({ type: \"UPDATE_LOCATION\", payload: search });\n    localStorage.setItem(\"search\", search);\n  };\n  /*  useEffect(() => {\n    const search = localStorage.getItem(\"search\");\n    console.log(search);\n\n    if (search || search === \"undefined\" || search === \"null\") {\n      updateSearch(search);\n    } else {\n      updateSearch(\"e\");\n    }\n    console.log(search);\n  }, []);*/\n  return (\n    <SearchContext.Provider value={{ state, dispatch, updateSearch }}>\n      {children}\n    </SearchContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
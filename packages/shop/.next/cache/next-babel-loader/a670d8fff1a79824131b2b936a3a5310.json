{"ast":null,"code":"var _jsxFileName = \"/Volumes/Second/npm/PFE_git/packages/shop/contexts/language/language.provider.js\";\nvar __jsx = React.createElement;\nimport React, { useReducer, useEffect } from 'react';\nimport LanguageContext from './language.context';\nimport languageReducer, { initialState } from './language.reducer';\nimport { IntlProvider } from 'react-intl';\nimport { StyleSheetManager } from 'styled-components';\nimport rtlPlugin from 'stylis-plugin-rtl';\nimport { InjectRTL } from 'styled/global.style';\n\nconst LanguageProvider = ({\n  children,\n  messages\n}) => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(languageReducer, initialState);\n\n  const toggleLanguage = lang => {\n    dispatch({\n      type: 'CURRENT_LANGUAGE',\n      payload: lang\n    });\n    localStorage.setItem('lang', lang);\n  };\n\n  useEffect(() => {\n    const localLang = localStorage.getItem('lang');\n    console.log(localLang);\n\n    if (localLang || localLang === 'undefined' || localLang === 'null') {\n      toggleLanguage(localLang); // toggleLanguage('en');\n    } else {\n      // toggleLanguage(navigator.language.split('-')[0]);\n      toggleLanguage('en'); // toggleLanguage(localLang);\n    }\n\n    console.log(localLang);\n  }, []);\n  let isRtl = state.lang === 'ar' || state.lang === 'he' ? true : false;\n  return __jsx(LanguageContext.Provider, {\n    value: {\n      state,\n      toggleLanguage,\n      dispatch\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, __jsx(IntlProvider, {\n    locale: state.lang,\n    messages: messages[state.lang],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, __jsx(InjectRTL, {\n    lang: state.lang,\n    dir: state.lang === 'ar' || state.lang === 'he' ? 'rtl' : 'ltr',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, isRtl ? __jsx(StyleSheetManager, {\n    stylisPlugins: [rtlPlugin],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, children) : children)));\n};\n\nexport default LanguageProvider;","map":{"version":3,"sources":["/Volumes/Second/npm/PFE_git/packages/shop/contexts/language/language.provider.js"],"names":["React","useReducer","useEffect","LanguageContext","languageReducer","initialState","IntlProvider","StyleSheetManager","rtlPlugin","InjectRTL","LanguageProvider","children","messages","state","dispatch","toggleLanguage","lang","type","payload","localStorage","setItem","localLang","getItem","console","log","isRtl"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,eAAP,IAA0BC,YAA1B,QAA8C,oBAA9C;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,SAASC,SAAT,QAA0B,qBAA1B;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA4B;AACnD,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBb,UAAU,CAACG,eAAD,EAAkBC,YAAlB,CAApC;;AACA,QAAMU,cAAc,GAAGC,IAAI,IAAI;AAC7BF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,kBAAR;AAA4BC,MAAAA,OAAO,EAAEF;AAArC,KAAD,CAAR;AACAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BJ,IAA7B;AACD,GAHD;;AAIAd,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmB,SAAS,GAAGF,YAAY,CAACG,OAAb,CAAqB,MAArB,CAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;;AAEA,QAAIA,SAAS,IAAIA,SAAS,KAAK,WAA3B,IAA0CA,SAAS,KAAK,MAA5D,EAAoE;AAClEN,MAAAA,cAAc,CAACM,SAAD,CAAd,CADkE,CAElE;AACD,KAHD,MAGO;AACL;AACAN,MAAAA,cAAc,CAAC,IAAD,CAAd,CAFK,CAGL;AACD;;AAEDQ,IAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AACD,GAdQ,EAcN,EAdM,CAAT;AAgBA,MAAII,KAAK,GAAGZ,KAAK,CAACG,IAAN,KAAe,IAAf,IAAuBH,KAAK,CAACG,IAAN,KAAe,IAAtC,GAA6C,IAA7C,GAAoD,KAAhE;AAEA,SACE,MAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAAEH,MAAAA,KAAF;AAASE,MAAAA,cAAT;AAAyBD,MAAAA;AAAzB,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AAAc,IAAA,MAAM,EAAED,KAAK,CAACG,IAA5B;AAAkC,IAAA,QAAQ,EAAEJ,QAAQ,CAACC,KAAK,CAACG,IAAP,CAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AACE,IAAA,IAAI,EAAEH,KAAK,CAACG,IADd;AAEE,IAAA,GAAG,EAAEH,KAAK,CAACG,IAAN,KAAe,IAAf,IAAuBH,KAAK,CAACG,IAAN,KAAe,IAAtC,GAA6C,KAA7C,GAAqD,KAF5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGS,KAAK,GACJ,MAAC,iBAAD;AAAmB,IAAA,aAAa,EAAE,CAACjB,SAAD,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,QADH,CADI,GAKJA,QATJ,CADF,CADF,CADF;AAkBD,CA1CD;;AA2CA,eAAeD,gBAAf","sourcesContent":["import React, { useReducer, useEffect } from 'react';\nimport LanguageContext from './language.context';\nimport languageReducer, { initialState } from './language.reducer';\nimport { IntlProvider } from 'react-intl';\nimport { StyleSheetManager } from 'styled-components';\nimport rtlPlugin from 'stylis-plugin-rtl';\nimport { InjectRTL } from 'styled/global.style';\n\nconst LanguageProvider = ({ children, messages }) => {\n  const [state, dispatch] = useReducer(languageReducer, initialState);\n  const toggleLanguage = lang => {\n    dispatch({ type: 'CURRENT_LANGUAGE', payload: lang });\n    localStorage.setItem('lang', lang);\n  };\n  useEffect(() => {\n    const localLang = localStorage.getItem('lang');\n    console.log(localLang);\n\n    if (localLang || localLang === 'undefined' || localLang === 'null') {\n      toggleLanguage(localLang);\n      // toggleLanguage('en');\n    } else {\n      // toggleLanguage(navigator.language.split('-')[0]);\n      toggleLanguage('en');\n      // toggleLanguage(localLang);\n    }\n\n    console.log(localLang);\n  }, []);\n\n  let isRtl = state.lang === 'ar' || state.lang === 'he' ? true : false;\n\n  return (\n    <LanguageContext.Provider value={{ state, toggleLanguage, dispatch }}>\n      <IntlProvider locale={state.lang} messages={messages[state.lang]}>\n        <InjectRTL\n          lang={state.lang}\n          dir={state.lang === 'ar' || state.lang === 'he' ? 'rtl' : 'ltr'}\n        >\n          {isRtl ? (\n            <StyleSheetManager stylisPlugins={[rtlPlugin]}>\n              {children}\n            </StyleSheetManager>\n          ) : (\n            children\n          )}\n        </InjectRTL>\n      </IntlProvider>\n    </LanguageContext.Provider>\n  );\n};\nexport default LanguageProvider;\n"]},"metadata":{},"sourceType":"module"}
{"version":3,"file":"static/webpack/static/development/pages/checkout.js.24edfd7560951513c503.hot-update.js","sources":["webpack:///./containers/Checkout/Checkout.tsx"],"sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport Router from \"next/router\";\nimport gql from \"graphql-tag\";\nimport Button from \"components/Button/Button\";\nimport RadioCard from \"components/RadioCard/RadioCard\";\nimport RadioGroup from \"components/RadioGroup/RadioGroup\";\nimport PaymentGroup from \"components/PaymentGroup/PaymentGroup\";\nimport Loader from \"components/Loader/Loader\";\nimport UpdateAddress from \"./Update/UpdateAddress\";\nimport UpdateContact from \"./Update/UpdateContact\";\nimport StripePaymentForm from \"../Payment/StripePaymentForm\";\nimport { DELETE_ADDRESS } from \"graphql/mutation/address\";\nimport { DELETE_CARD } from \"graphql/mutation/card\";\nimport { DELETE_CONTACT } from \"graphql/mutation/contact\";\nimport { openModal } from \"@redq/reuse-modal\";\nimport { Product } from \"interfaces\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { CartContext } from \"contexts/cart/cart.context\";\nimport CheckcoutWrapper, {\n  CheckoutContainer,\n  OrderSummary,\n  OrderSummaryItem,\n  OrderLabel,\n  OrderAmount,\n  DeliverySchedule,\n  Heading,\n  DeliveryAddress,\n  ButtonGroup,\n  Contact,\n  PaymentOption,\n  CheckoutSubmit,\n  CouponBoxWrapper,\n  ErrorMsg,\n} from \"./Checkout.style\";\nimport {\n  getCartProducts,\n  getSubTotalPrice,\n  getTotalPrice,\n  getDiscount,\n  getCoupon,\n} from \"../../helper/utility\";\n\nimport CouponBox, { CouponDisplay } from \"components/CouponBox/CouponBox\";\nimport { ProfileContext } from \"contexts/profile/profile.context\";\nimport { FormattedMessage } from \"react-intl\";\n\n// The type of props Checkout Form receives\ninterface MyFormProps {\n  products: Product[];\n  items: number;\n  oldDiscount: number;\n  oldCoupon: any;\n  price: number;\n  token: string;\n  deviceType: string;\n  subTotalPrice: any;\n}\n\nconst APPLY_COUPON = gql`\n  mutation applyCoupon($code: String!) {\n    applyCoupon(code: $code) {\n      id\n      code\n      discountInPercent\n    }\n  }\n`;\n\nconst Checkout: React.FC<MyFormProps & any> = ({ token, deviceType }) => {\n  const [couponCode, setCouponCode] = useState(\"\");\n  const [couponError, setError] = useState(\"\");\n  const [processedDiscount, setProcessedDiscount] = useState(getDiscount());\n  const [processedCoupon, setProcessedCoupon] = useState(getCoupon());\n  const { state, dispatch } = useContext(ProfileContext);\n  const { removeCoupon, discount, coupon, addCoupon, clearCart } = useContext(\n    CartContext\n  );\n  const [loading, setLoading] = useState(false);\n  const [isValid, setIsValid] = useState(false);\n  const { address, contact, card, schedules } = state;\n  const items = getCartProducts();\n  const subTotalPrice = getSubTotalPrice();\n  const totalPrice = getTotalPrice();\n\n  const [deleteContactMutation] = useMutation(DELETE_CONTACT);\n  const [deleteAddressMutation] = useMutation(DELETE_ADDRESS);\n  const [deletePaymentCardMutation] = useMutation(DELETE_CARD);\n  const [applyedCoupon] = useMutation(APPLY_COUPON);\n\n  const handleSubmit = async () => {\n    setLoading(true);\n    if (isValid) {\n      clearCart();\n      Router.push(\"/order-received\");\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    setProcessedDiscount(discount);\n    setProcessedCoupon(coupon);\n  }, [coupon]);\n\n  useEffect(() => {\n    if (\n      totalPrice > 0 &&\n      items.length > 0 &&\n      addresses.length &&\n      contacts.length &&\n      card.length &&\n      schedules.length\n    ) {\n      setIsValid(true);\n    }\n  }, [state]);\n\n  // Add or edit modal\n  const handleModal = (\n    modalComponent: any,\n    modalProps = {},\n    className: string = \"add-address-modal\"\n  ) => {\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: \"auto\",\n        enableResizing: false,\n        disableDragging: true,\n        className: className,\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: { item: modalProps },\n    });\n  };\n\n  const handleEditDelete = async (item: any, type: string, name: string) => {\n    if (type === \"edit\") {\n      const modalComponent = name === \"address\" ? UpdateAddress : UpdateContact;\n      handleModal(modalComponent, item);\n    } else {\n      switch (name) {\n        case \"payment\":\n          dispatch({ type: \"DELETE_CARD\", payload: item.id });\n\n          return await deletePaymentCardMutation({\n            variables: { cardId: JSON.stringify(item.id) },\n          });\n        case \"contacts\":\n          dispatch({ type: \"DELETE_CONTACT\", payload: item.id });\n\n          return await deleteContactMutation({\n            variables: { contactId: JSON.stringify(item.id) },\n          });\n        case \"addresses\":\n          dispatch({ type: \"DELETE_ADDRESS\", payload: item.id });\n\n          return await deleteAddressMutation({\n            variables: { addressId: JSON.stringify(item.id) },\n          });\n        default:\n          return false;\n      }\n    }\n  };\n\n  const handleApplyCoupon = async () => {\n    const {\n      data: { applyCoupon },\n    }: any = await applyedCoupon({\n      variables: { code: couponCode },\n    });\n    if (applyCoupon && applyCoupon.discountInPercent) {\n      addCoupon(applyCoupon);\n      setCouponCode(\"\");\n    } else {\n      setError(\"Invalid Coupon\");\n    }\n  };\n  const handleOnUpdate = (couponCode: any) => {\n    setCouponCode(couponCode);\n  };\n\n  return (\n    <form>\n      <CheckcoutWrapper>\n        <CheckoutContainer>\n          <OrderSummary>\n            <OrderSummaryItem style={{ marginBottom: 15 }}>\n              <OrderLabel>\n                <FormattedMessage id=\"subTotal\" defaultMessage=\"Subtotal\" /> (\n                {items.length}{\" \"}\n                <FormattedMessage id=\"itemsText\" defaultMessage=\"items\" />)\n              </OrderLabel>\n              <OrderAmount>\n                ${Number.parseFloat(subTotalPrice).toFixed(2) || 0}\n              </OrderAmount>\n            </OrderSummaryItem>\n\n            <OrderSummaryItem style={{ marginBottom: 30 }}>\n              <OrderLabel>\n                <FormattedMessage\n                  id=\"shippinFeeText\"\n                  defaultMessage=\"Shipping Fee\"\n                />\n              </OrderLabel>\n              <OrderAmount>$00</OrderAmount>\n            </OrderSummaryItem>\n\n            <OrderSummaryItem\n              style={{ marginBottom: 30 }}\n              className=\"voucherWrapper\"\n            >\n              <OrderLabel>\n                <FormattedMessage id=\"voucherText\" defaultMessage=\"Voucher\" />\n              </OrderLabel>\n              {processedDiscount &&\n              processedCoupon.code !== \"DEFAULT_COUPON\" ? (\n                <CouponDisplay\n                  code={processedCoupon.code}\n                  sign=\"-\"\n                  currency=\"$\"\n                  price={discount}\n                  onClick={(e) => {\n                    e.preventDefault();\n                    removeCoupon();\n                  }}\n                />\n              ) : (\n                <>\n                  <CouponBoxWrapper>\n                    <CouponBox\n                      buttonTitle=\"Apply\"\n                      intlCouponBoxPlaceholder=\"couponPlaceholder\"\n                      onClick={handleApplyCoupon}\n                      value={couponCode}\n                      onUpdate={handleOnUpdate}\n                      style={{ maxWidth: 350, height: 50 }}\n                      intlCouponApplyButton=\"voucherApply\"\n                    />\n                    {couponError && (\n                      <ErrorMsg>\n                        <FormattedMessage\n                          id=\"couponError\"\n                          defaultMessage={couponError}\n                        />\n                      </ErrorMsg>\n                    )}\n                  </CouponBoxWrapper>\n                </>\n              )}\n            </OrderSummaryItem>\n\n            <OrderSummaryItem>\n              <OrderLabel>\n                <FormattedMessage id=\"totalText\" defaultMessage=\"Total\" />\n              </OrderLabel>\n              <OrderAmount>\n                ${Number.parseFloat(totalPrice).toFixed(2)}\n              </OrderAmount>\n            </OrderSummaryItem>\n          </OrderSummary>\n          {/* DeliverySchedule */}\n          <DeliverySchedule>\n            <Heading>\n              <FormattedMessage\n                id=\"deliverySchedule\"\n                defaultMessage=\"Select Your Delivery Schedule\"\n              />\n            </Heading>\n            <RadioGroup\n              items={schedules}\n              component={(item: any) => (\n                <RadioCard\n                  id={item.id}\n                  key={item.id}\n                  title={item.title}\n                  content={item.time_slot}\n                  name=\"schedule\"\n                  checked={item.type === \"primary\"}\n                  withActionButtons={false}\n                  onChange={() =>\n                    dispatch({\n                      type: \"SET_PRIMARY_SCHEDULE\",\n                      payload: item.id.toString(),\n                    })\n                  }\n                />\n              )}\n            />\n          </DeliverySchedule>\n          {/* DeliveryAddress */}\n          <DeliveryAddress>\n            <Heading>\n              <FormattedMessage\n                id=\"checkoutDeliveryAddress\"\n                defaultMessage=\"Select Your Delivery Address\"\n              />\n            </Heading>\n            <ButtonGroup>\n              <RadioGroup\n                items={addresses}\n                component={(item: any) => (\n                  <RadioCard\n                    id={item.id}\n                    key={item.id}\n                    title={item.name}\n                    content={item.info}\n                    name=\"address\"\n                    checked={item.type === \"primary\"}\n                    onChange={() =>\n                      dispatch({\n                        type: \"SET_PRIMARY_ADDRESS\",\n                        payload: item.id.toString(),\n                      })\n                    }\n                    onEdit={() => handleEditDelete(item, \"edit\", \"address\")}\n                    onDelete={() => handleEditDelete(item, \"delete\", \"address\")}\n                  />\n                )}\n                secondaryComponent={\n                  <Button\n                    title=\"Add Adderss\"\n                    iconPosition=\"right\"\n                    colors=\"primary\"\n                    size=\"small\"\n                    variant=\"outlined\"\n                    type=\"button\"\n                    intlButtonId=\"addAddressBtn\"\n                    onClick={() =>\n                      handleModal(UpdateAddress, \"add-address-modal\")\n                    }\n                  />\n                }\n              />\n            </ButtonGroup>\n          </DeliveryAddress>\n          {/* Contact number */}\n          <Contact>\n            <Heading>\n              <FormattedMessage\n                id=\"contactNumberText\"\n                defaultMessage=\"Select Your Contact Number\"\n              />\n            </Heading>\n            <ButtonGroup>\n              <RadioGroup\n                items={contacts}\n                component={(item: any) => (\n                  <RadioCard\n                    id={item.id}\n                    key={item.id}\n                    title={item.type}\n                    content={item.number}\n                    checked={item.type === \"primary\"}\n                    onChange={() =>\n                      dispatch({\n                        type: \"SET_PRIMARY_CONTACT\",\n                        payload: item.id.toString(),\n                      })\n                    }\n                    name=\"contact\"\n                    onEdit={() => handleEditDelete(item, \"edit\", \"contact\")}\n                    onDelete={() => handleEditDelete(item, \"delete\", \"contact\")}\n                  />\n                )}\n                secondaryComponent={\n                  <Button\n                    title=\"Add Contact\"\n                    iconPosition=\"right\"\n                    colors=\"primary\"\n                    size=\"small\"\n                    variant=\"outlined\"\n                    type=\"button\"\n                    intlButtonId=\"addContactBtn\"\n                    onClick={() =>\n                      handleModal(UpdateContact, \"add-contact-modal\")\n                    }\n                  />\n                }\n              />\n            </ButtonGroup>\n          </Contact>\n          {/* PaymentOption */}\n          <PaymentOption>\n            <Heading>\n              <FormattedMessage\n                id=\"selectPaymentText\"\n                defaultMessage=\"Select Payment Option\"\n              />\n            </Heading>\n            <PaymentGroup\n              name=\"payment\"\n              deviceType={deviceType}\n              items={card}\n              onEditDeleteField={(item: any, type: string) =>\n                handleEditDelete(item, type, \"payment\")\n              }\n              onChange={(item: any) =>\n                dispatch({\n                  type: \"SET_PRIMARY_CARD\",\n                  payload: item.id.toString(),\n                })\n              }\n              handleAddNewCard={() => {\n                handleModal(\n                  StripePaymentForm,\n                  { totalPrice },\n                  \"add-address-modal stripe-modal\"\n                );\n              }}\n            />\n          </PaymentOption>\n          {/* CheckoutSubmit */}\n          <CheckoutSubmit>\n            <Button\n              onClick={handleSubmit}\n              type=\"button\"\n              disabled={!isValid}\n              title=\"Proceed to Checkout\"\n              // size='small'\n              intlButtonId=\"proceesCheckout\"\n              loader={<Loader />}\n              isLoading={loading}\n            />\n          </CheckoutSubmit>\n        </CheckoutContainer>\n      </CheckcoutWrapper>\n    </form>\n  );\n};\n\nexport default Checkout;\n"],"mappings":"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","sourceRoot":""}
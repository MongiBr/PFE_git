{"version":3,"file":"static/webpack/static/development/pages/profile.js.f0f671dbad5bde83519f.hot-update.js","sources":["webpack:///./containers/Profile/Settings/Settings.tsx"],"sourcesContent":["import React, { useContext } from \"react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { Col } from \"react-styled-flexboxgrid\";\nimport { openModal } from \"@redq/reuse-modal\";\nimport RadioCard from \"components/RadioCard/RadioCard\";\nimport { ProfileContext } from \"contexts/profile/profile.context\";\nimport { DELETE_ADDRESS } from \"graphql/mutation/address\";\nimport { DELETE_CARD } from \"graphql/mutation/card\";\nimport { DELETE_CONTACT } from \"graphql/mutation/contact\";\nimport StripePaymentForm from \"../../Payment/StripePaymentForm\";\nimport {\n  SettingsForm,\n  SettingsFormContent,\n  HeadingSection,\n  Title,\n  Input,\n  Row,\n  ButtonGroup,\n} from \"./Settings.style\";\nimport RadioGroup from \"components/RadioGroup/RadioGroup\";\nimport PaymentGroup from \"components/PaymentGroup/PaymentGroup\";\nimport UpdateAddress from \"../../Checkout/Update/UpdateAddress\";\nimport UpdateContact from \"../../Checkout/Update/UpdateContact\";\nimport Button from \"components/Button/Button\";\nimport { UPDATE_ME } from \"graphql/mutation/me\";\nimport { FormattedMessage } from \"react-intl\";\n\ntype SettingsContentProps = {\n  deviceType?: {\n    mobile: boolean;\n    tablet: boolean;\n    desktop: boolean;\n  };\n};\n\nconst SettingsContent: React.FC<SettingsContentProps> = ({ deviceType }) => {\n  const { state, dispatch } = useContext(ProfileContext);\n  const [updateMeMutation] = useMutation(UPDATE_ME);\n  const [deleteContactMutation] = useMutation(DELETE_CONTACT);\n  const [deleteAddressMutation] = useMutation(DELETE_ADDRESS);\n  const [deletePaymentCardMutation] = useMutation(DELETE_CARD);\n\n  const { addresses, contacts, card } = state;\n  // const addressList =\n  //   address && address.length ? modifyaddressData(address) : [];\n\n  const handleChange = (value: string, field: string) => {\n    dispatch({ type: \"HANDLE_ON_INPUT_CHANGE\", payload: { value, field } });\n  };\n  // Add or edit modal\n  const handleModal = (\n    modalComponent: any,\n    modalProps = {},\n    className: string = \"add-address-modal\"\n  ) => {\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: \"auto\",\n        enableResizing: false,\n        disableDragging: true,\n        className: className,\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: { item: modalProps },\n    });\n  };\n\n  const handleEditDelete = async (item: any, type: string, name: string) => {\n    if (type === \"edit\") {\n      const modalComponent =\n        name === \"addresses\" ? UpdateAddress : UpdateContact;\n      handleModal(modalComponent, item);\n    } else {\n      console.log(name, item, type, \"delete\");\n      switch (name) {\n        case \"payment\":\n          dispatch({ type: \"DELETE_CARD\", payload: item.id });\n\n          return await deletePaymentCardMutation({\n            variables: { cardId: JSON.stringify(item.id) },\n          });\n        case \"contacts\":\n          dispatch({ type: \"DELETE_CONTACT\", payload: item.id });\n\n          return await deleteContactMutation({\n            variables: { contactId: JSON.stringify(item.id) },\n          });\n        case \"addresses\":\n          dispatch({ type: \"DELETE_ADDRESS\", payload: item.id });\n\n          return await deleteAddressMutation({\n            variables: { addressId: JSON.stringify(item.id) },\n          });\n        default:\n          return false;\n      }\n    }\n  };\n\n  const handleSave = async () => {\n    const { name, email } = state;\n    await updateMeMutation({\n      variables: { meInput: JSON.stringify({ name, email }) },\n    });\n  };\n\n  const handleData = (data: any) => {\n    console.log(data);\n  };\n\n  return (\n    <SettingsForm>\n      <SettingsFormContent>\n        <HeadingSection>\n          <Title>\n            <FormattedMessage\n              id=\"profilePageTitle\"\n              defaultMessage=\"Your Profile\"\n            />\n          </Title>\n        </HeadingSection>\n        <Row style={{ alignItems: \"flex-end\", marginBottom: \"50px\" }}>\n          <Col xs={12} sm={5} md={5} lg={5}>\n            <Input\n              type=\"text\"\n              label=\"Name\"\n              value={state.name}\n              onUpdate={(value: string) => handleChange(value, \"name\")}\n              style={{ backgroundColor: \"#F7F7F7\" }}\n              intlInputLabelId=\"profileNameField\"\n            />\n          </Col>\n\n          <Col xs={12} sm={5} md={5} lg={5}>\n            <Input\n              type=\"email\"\n              label=\"Email Address\"\n              value={state.email}\n              onUpdate={(value: string) => handleChange(value, \"email\")}\n              style={{ backgroundColor: \"#F7F7F7\" }}\n              intlInputLabelId=\"profileEmailField\"\n            />\n          </Col>\n\n          <Col xs={12} sm={2} md={2} lg={2}>\n            <Button\n              title=\"Save\"\n              onClick={handleSave}\n              style={{ width: \"100%\" }}\n              intlButtonId=\"profileSaveBtn\"\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={12} sm={12} md={12} lg={12}>\n            <SettingsFormContent>\n              <HeadingSection>\n                <Title>\n                  <FormattedMessage\n                    id=\"contactNumberTItle\"\n                    defaultMessage=\"Contact Numbers\"\n                  />\n                </Title>\n              </HeadingSection>\n              <ButtonGroup>\n                <RadioGroup\n                  items={contacts}\n                  component={(item: any) => (\n                    <RadioCard\n                      id={item.id}\n                      key={item.id}\n                      title={item.type}\n                      content={item.number}\n                      checked={item.type === \"primary\"}\n                      onChange={() =>\n                        dispatch({\n                          type: \"SET_PRIMARY_CONTACT\",\n                          payload: item.id.toString(),\n                        })\n                      }\n                      name=\"contact\"\n                      onEdit={() => handleEditDelete(item, \"edit\", \"contact\")}\n                      onDelete={() =>\n                        handleEditDelete(item, \"delete\", \"contact\")\n                      }\n                    />\n                  )}\n                  secondaryComponent={\n                    <Button\n                      title=\"Add Contact\"\n                      iconPosition=\"right\"\n                      colors=\"primary\"\n                      size=\"small\"\n                      variant=\"outlined\"\n                      type=\"button\"\n                      intlButtonId=\"addContactBtn\"\n                      onClick={() =>\n                        handleModal(UpdateContact, {}, \"add-contact-modal\")\n                      }\n                    />\n                  }\n                />\n              </ButtonGroup>\n            </SettingsFormContent>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={12} sm={12} md={12} lg={12} style={{ position: \"relative\" }}>\n            <SettingsFormContent>\n              <HeadingSection>\n                <Title>\n                  <FormattedMessage\n                    id=\"deliveryAddresTitle\"\n                    defaultMessage=\"Delivery Address\"\n                  />\n                </Title>\n              </HeadingSection>\n              <ButtonGroup>\n                <RadioGroup\n                  items={addresses}\n                  component={(item: any) => (\n                    <RadioCard\n                      id={item.id}\n                      key={item.id}\n                      title={item.name}\n                      content={item.info}\n                      name=\"address\"\n                      checked={item.type === \"primary\"}\n                      onChange={() =>\n                        dispatch({\n                          type: \"SET_PRIMARY_ADDRESS\",\n                          payload: item.id.toString(),\n                        })\n                      }\n                      onEdit={() => handleEditDelete(item, \"edit\", \"address\")}\n                      onDelete={() =>\n                        handleEditDelete(item, \"delete\", \"address\")\n                      }\n                    />\n                  )}\n                  secondaryComponent={\n                    <Button\n                      title=\"Add Adderss\"\n                      iconPosition=\"right\"\n                      colors=\"primary\"\n                      size=\"small\"\n                      variant=\"outlined\"\n                      type=\"button\"\n                      intlButtonId=\"addAddressBtn\"\n                      onClick={() =>\n                        handleModal(UpdateAddress, {}, \"add-address-modal\")\n                      }\n                    />\n                  }\n                />\n              </ButtonGroup>\n            </SettingsFormContent>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col xs={12} sm={12} md={12} lg={12}>\n            <SettingsFormContent>\n              <HeadingSection>\n                <Title>\n                  <FormattedMessage\n                    id=\"paymentCardTitle\"\n                    defaultMessage=\"Payments Card\"\n                  />\n                </Title>\n              </HeadingSection>\n              <PaymentGroup\n                name=\"payment\"\n                deviceType={deviceType}\n                items={card}\n                onEditDeleteField={(item: any, type: string) =>\n                  handleEditDelete(item, type, \"payment\")\n                }\n                onChange={(item: any) =>\n                  dispatch({\n                    type: \"SET_PRIMARY_CARD\",\n                    payload: item.id.toString(),\n                  })\n                }\n                handleAddNewCard={() => {\n                  handleModal(\n                    StripePaymentForm,\n                    { buttonText: \"Add Card\" },\n                    \"add-address-modal stripe-modal\"\n                  );\n                }}\n              />\n            </SettingsFormContent>\n          </Col>\n        </Row>\n      </SettingsFormContent>\n    </SettingsForm>\n  );\n};\n\nexport default SettingsContent;\n"],"mappings":"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","sourceRoot":""}